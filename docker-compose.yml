services:

  bank-keycloak:
    container_name: bank-keycloak
    image: quay.io/keycloak/keycloak:26.2.5
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_IMPORT: /opt/jboss/keycloak/imports/realm-export.json
    command:
      - start-dev
      - --import-realm
    ports:
      - "8090:8080"
    volumes:
      - ./keycloak/config/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'exec 3<>/dev/tcp/localhost/8080; echo -e "GET /health/ready HTTP/1.1\nhost: localhost:8080\n" >&3; timeout --preserve-status 1 cat <&3 | grep -m 1 status | grep -m 1 UP; ERROR=$?; exec 3<&-; exec 3>&-; exit $ERROR'
        ]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - backend

  bank-consul:
    container_name: bank-consul
    image: hashicorp/consul:1.21.0
    hostname: consul-server1
    restart: unless-stopped
    volumes:
      - ./consul/config/key_value.json:/consul/tmp/key_value.json
    ports:
      - "8500:8500"
    command: "agent -dev -node=myNode -client=0.0.0.0 -log-level=INFO"
#     consul kv import @consul/tmp/key_value.json
    networks:
      - backend

  bank_front:
    build: front/.
    image: bank_front
    container_name: bank_front
    ports:
      - "8080:8080"
    environment:
      - SPRING_CLOUD_CONSUL_HOST=bank-consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://bank-keycloak:8080/realms/master
    depends_on:
      bank-keycloak:
        condition: service_started

    networks:
      - backend

  bank_accounts:
    build: accounts/.
    image: bank_accounts
    container_name: bank_accounts
    ports:
      - "8081:8081"
    environment:
      - SPRING_CLOUD_CONSUL_HOST=bank-consul
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://bank-keycloak:8080/realms/master
    depends_on:
      bank-keycloak:
        condition: service_started

    networks:
      - backend


networks:
  backend:
    driver: bridge